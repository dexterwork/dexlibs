class GetThreeOrderNumber extends AsyncTask<Void, Void, Void> {
        @SuppressLint("NewApi")
        @Override
        protected Void doInBackground(Void... params) {
            InputStream is = null;
            String url = LocationObject.getHostName() + "getPreODNumber.ashx?mtype=a&OD_ON0=Y&OD_ON1=N&OD_ON2=Y";
            MLog.i(this, "dex Host Name URL:" + url);

            HttpClient httpClient = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(url);
            try {
                HttpResponse response = httpClient.execute(httpGet);
                HttpEntity httpEntity = response.getEntity();
              String  result = EntityUtils.toString(httpEntity);
                is = new ByteArrayInputStream(result.getBytes(StandardCharsets.UTF_8));
            } catch (IOException e) {
                e.printStackTrace();
            }


            Reader reader;
            try {
                reader = new InputStreamReader(is, "UTF-8");
                Gson gson = new GsonBuilder().create();
                threeOrderBundles = gson.fromJson(reader, ThreeOrderBundle[].class);
                is.close();
            } catch (Exception e) {
                e.printStackTrace();
            }


            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            MLog.i(this, "dex ----------------------------------------------");
            for (ThreeOrderBundle b : threeOrderBundles) {
                MLog.i(this, "dex ThreeOrderBundle OD_TYPE:" + b.getOD_Type());
                MLog.i(this, "dex ThreeOrderBundle OD_ON:" + b.getOD_ON());
                MLog.i(this, "dex ThreeOrderBundle MerchantOrderNo:" + b.getMerchantOrderNo());
                MLog.i(this, "dex ----------------------------------------------");
            }
        }
    }